Spring容器的refresh()【创建刷新】
1、prepareRefresh()刷新前的预处理
	1)、initPropertySources();初始化一些属性设置;子类自定义个性化的属性设置方法
	2)、getEnviroment().validateRequiredProperties();校验属性的合法等
	3)、this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中的一些早起的事件
2、obtainFreshBeanFactory();获取BeanFactory
	1)、refreshBeanFactory();刷新【创建】BeanFactory
			创建了一个this.beanFactory = new DefaultListableBeanFactory();
			设置id
	2)、getBeanFactory();返回刚才GenericApplicationContext创建的BeanFactory对象
	3)、将创建的BeanFactory【DefaultListableBeanFactory】返回
3、prepareBeanFactory(beanFactory);BeanFactory的预准备工作(BeanFactory进行一些设置)
	1)、设置BeanFactory的类加载器、支持表达式解析器...
	2)、添加部分BeanPostProcessor【ApplicationContextAwareProcessor】
	3)、设置忽略的自动装配接口EnvironmentAware...
	4)、注册可以解析的自动装配；我们能在任何组件中自动注入:
		BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
	5)、添加BeanPostProcessor【ApplicationListenerDetector】
	6)、添加编译时的AspectJ
	7)、给BeanFactory中注册一些能用的组件:
		environment【ConfigurableEnvironment】
		systemProperties【Map<String, Object>】
		systemEnviroment【Map<String, Object>】
4、postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行的后置处理工作
	1)、子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置
=======================以上是BeanFactory的创建及预准备工作================================================
5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor
	BeanFactoryPostProcessor;BeanFactory的后置处理器，在BeanFactory标准初始化之后执行（前4步）
	两个接口BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
	1)、执行BeanFactoryPostProcessor的方法
		先执行BeanDefinitionRegistryPostProcessor的方法
		1)、获取所有的BeanDefinitionRegistryPostProcessor
		2)、看先执行实现了PriorityOrderded优先级接口的BeanDefinitionRegistryPostProcessor、
			postProcessor.postProcessBeanDefinitionRegistry(registry)
		3)、再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
			postProcessor.postProcessBeanDefinitionRegistry(registry)
		4)、最后执行没有实现任何优先级或是顺序接口的BeanDefinitionRegistryPostProcessor
		
		再执行BeanFactoryPostProcessor的方法
		1)、获取所有的BeanFactoryPostProcessor
		2)、看先执行实现了PriorityOrderded优先级接口的BeanFactoryPostProcessor、
			postProcessor.postProcessBeanFactory()
		3)、再执行实现了Ordered顺序接口的BeanFactoryPostProcessor
			postProcessor.postProcessBeanFactory()
		4)、最后执行没有实现任何优先级或是顺序接口的BeanFactoryPostProcessor
			postProcessor.postProcessBeanFactory()
6、registerBeanPostProcessors(beanFactory);注册BeanPostProcessor(Bean的后置处理器)【intercept bean creation】
	BeanPostProccessor,
	DestructionAwareBeanPostProcessor,
	InstantiationAwareBeanPostProcessor,
	SmartInstantiationAwareBeanPostProcessor
	MergerBeanDefinitionPostProcessor【internalPostProcessors】
		1)、获取所有的BeanPostProcessor;后置处理器都默认可以有PriorityOrdered、Ordered接口来执行优先级
		2)、先注册PriorityOrdered优先级接口的BeanPostProcessor
			把每一个BeanPostProcessor 添加到BeanFactory中
			beanFactory.addBeanPostProcessor(postProcessor);
		3)、再注册Orderded接口的
		4)、最后注册没有实现任何优先级接口的
		5)、最终注册MergerBeanDefinitionPostProcessor
		6)、注册一个ApplicationListenerDetector,来在Bean创建完成后检查是否是ApplicationListener，如果是
			applicationContext.addApplicationListener((ApplicationListener<?>) bean)
7、initMessageSource();初始化MessageSource组件(做国际化功能，消息绑定，消息解析)
		1)、获取BeanFactory
		2)、看容器中是否有id为messageSource的组件
			如果有赋值给MessageSource，如果没有自己创建一个DelegatingMessageSource;
				MessageSource:取出国际化配置文件中的某个key值；能按照区域信息获取
		3)、把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource;
			beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource)
8、initApplicationEventMulticaster();初始化事件派发器
		1)、获取BeanFactory
		2)、从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster
		3)、如果上一步没有配置，创建一个SimpleApplicationEventMulticaster
		4)、将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件直接自动注入
9、Onrefresh();留给子容器(子类)
		1、子类重写这个方法，在容器刷新的时候可以自定义逻辑
10、registerListeners();给容器中将所有项目里的ApplicationListener注册进来
		1)、从容器中拿到所有的ApplicationListener
		2)、将每个监听器添加到事件派发器中
			getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName)
		3)、派发之前步骤产生的事件
11、finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例bean
		1)、beanFactory.preInstantiateSingletons()
			1)、获取容器中的所有Bean、依次进行初始化和创建对象
			2)、获取bean分定义信息，RootBeanDefinition
			3)、Bean不是抽象的、是单实例的、是懒加载
				1)、判断是否是FactoryBean:是否是实现FactoryBean接口的Bean
				2)、不是工厂Bean，利用getBean(beanName);创建对象 getBean(beanName); ioc.getBean()
					0)调用doGetBean方法
						1)、doGetBean(name, null, null, false)
						2)、先获取缓存中保存的单实例Bean，如果能获取到说明这个Bean之前被创建过(所有创建过的单实例Bean都会被缓存起来)
							从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256)中获取的
							// Eagerly check singleton cache for manually registered singletons.
						3)、缓存中获取不到，开始Bean的创建流程
						4)、标签当前bean已经被标记，markBeanAsCreated(beanName)
						5)、获取Bean的定义信息
						6)、【获取当前Bean依赖的其他Bean;如果有按照getBean()把依赖的Bean先创建出来】
							String[] dependsOn = mbd.getDependsOn();
						7)、启动单实例Bean的创建流程
							sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() 
								此时会调用new ObjectFactory<Object>的getSingleton()方法
								在getSingleton()方法中，调用getObject()方法，由于new ObjectFactory<Object>为匿名内部类
								此时调用getObject方法会调用匿名类中重写的getObject方法
								@Override
								public Object getObject() throws BeansException {
								try {
									return createBean(beanName, mbd, args);
								}
								createBean(beanName, mdb, args)
									1)、Object bean = resolveBeforeInstantiation(beanName, mdbToUse);让BeanPostProcessor先拦截返回代理对象
										InstantiationAwareBeanPostProcessor;提前执行
										先触发postProcessBeforeInstantiation()
										如果有返回值，触发postProcessAfterInitialization()
									2)、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象，调用4)
									3)、Object beanInstance = doCreateBean(beanName, mdbToUse, args);创建Bean
										1)、创建Bean实例 createBeanInstance(beanName, mdb, args);
											利用工厂方法或者对象的构造器创建Bean实例(工厂方法，就是@Bean)
										2)、applyMergedBeanDefinitionPostProcessors(mdb, beanType, beanName);
											调用MergerBeanDefinitionPostProcessor
												bdp.postProcessMergedBeanDefinition(mdb, beanType, beanName);
										3)、【Bean属性赋值】populateBean(beanName, mdb, instanceWrapper);
											赋值之前：
											1)、拿到InstantiationAwareBeanPostProcessor后置处理器
												postProcessAfterInstantiation()
											2)、拿到InstantiationAwareBeanPostProcessor后置处理器
												postProcessPropertyValues()
											====赋值之前=====
											3)、应用Bean属性的值，为属性利用setter方法等进行赋值：
												applyPropertyValues(beanName, mdb, bw, pvs)
										4)、【Bean的初始化】initializeBean(beanName, exposedObject, mdb)
											1)、【执行Aware接口方法】invokeAwareMethods(beanName, bean);执行Aware接口方法
												BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
											2)、【执行后置处理器初始化之前】applyBeanPostProcessorBeforeInitialization(wrappedBean,beanName)
												BeanPostProcessor.postProcessBeforeIntialization()
											3)、【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mdb);
												1)、是否是InitializingBean接口的实现，执行接口规定的初始化
												2)、是否自定义初始化方法
											4)、【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
												BeanPostProcessor.postProcessAfterInitialization()
										5)、注册Bean的销毁方法；（关闭才调用，现在只是注册）registerDisposableBeanIfNecessary()
								完成singletonObject = singletonFactory.getObject()方法
								将创建的Bean添加到缓存中singletonObjects,addSingleton()方法
									ioc容器就是这些Map，很多的Map里面保存了单实例Bean，环境信息。。。。。
								退出getSingleton方法
						退出doGetBean()方法	
					退出getBean()方法
			4)、所有bean都利用getBean()方法创建完成以后，
				检查所有的Bean是否是Smart	InitializingSingleton接口，如果是，就执行afterSingletonsInstantiated()方法			
12、finishRefresh();完成BeanFactory的初始化工作，IOC容器创建完成
	1)、initLifecycleProcessor();初始化和生命周期有关的后置处理器：LifecycleProcessor
		默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】;如果没有new DefaultLifecycleProcessor();
		写一个LifecycleProcessor的实现类，可以在BeanFactory的onRefresh(); onClose()
	2)、getLifecycleProcessor().onRefresh();
		拿到前面定义的生命周期处理器(BeanFactory)，回调
	3)、publishEvent(new ContextRefreshedEvent(this))
	4)、LiveBeansView.registerApplicationContext(this);


====总结=====
1)、Spring容器在启动的时候，会先保存所有注册进来的Bean的定义信息
	1)、xml注册bean:<bean>
	2)、注解注册Bean:@Service、@Component、@Bean、xxx
2)、Spring容器中会找到合适的实际创建Bean
	1)、用到这个bean的时候，利用getBean创建bean，创建好以后保存在容器中
	2)、统一创建剩下所有的bean的时候:finishBeanFactoryInitialization()
3)、后置处理器
	每一个bean创建完成，都会使用各种后置处理器进行处理，增强bean的功能
		AutowiredAnnotationBeanPostProcess:处理自动注入
		AnnotationAwareAspectJAuyoProxyCreator:来做aop功能
4)、事件驱动模型
	ApplicationListener：事件监听
	ApplicationEventMulticaster事件派发
								
							
							
							
	